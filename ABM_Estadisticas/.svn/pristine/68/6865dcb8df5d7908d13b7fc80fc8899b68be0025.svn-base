<?php
namespace abmestadisticas\abmBundle\Controller;

use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Template;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpFoundation\Request;
use abmestadisticas\abmBundle\Entity\Anio;
use abmestadisticas\abmBundle\Entity\Capitulo;
use abmestadisticas\abmBundle\Form\FormAnio;
use abmestadisticas\abmBundle\Entity\ArchivoEstadistico;
use abmestadisticas\abmBundle\Entity\Indicador;
use abmestadisticas\abmBundle\Form\CapituloType;
use Doctrine\DBAL\DBALException;

/**
 * @Route("/")
 * 
 * 
 */

class AdminController extends Controller {
	/**
	 * @Route("/")
	 *
	 *
	 */
	public function indexAction() {
		return $this->forward("abmBundle:admin:admin");
	}
	
	
	public function generateFormAnio($em,$request,&$anio) {


		$query = $em->getRepository("abmBundle:Anio")->findAll();
		$choicesSelectAnio = array(-1 => "Seleccione Año",2000 => 2000,2001 => 2001,2002 => 2002,
		2003 => 2003,2004 => 2004,2005 => 2005,2006 => 2006,2007 => 2007,2008 => 2008,2009 => 2009,2010 => 2010,2011 => 2011,
		2012 => 2012,2013 => 2013,2014 => 2014,2015 => 2015,2016 => 2016,2017 => 2017,2018 => 2018,2019 => 2019,
		2020 => 2020,2021 => 2021,2022 => 2022,2023 => 2023,2024 => 2024,2025 => 2025,2026 => 2026,2027 => 2027,
		2028 => 2028,2029 => 2029,2030 => 2030);
		

			foreach ($query as $q)
				unset($choicesSelectAnio[array_search($q->getAnioId(),$choicesSelectAnio)]);
		
				$agregarAnio = $this->createForm(new FormAnio($choicesSelectAnio,$this->generateUrl('_formAnio')), $anio);

				
				return $agregarAnio;
	}
	
	public function generateFormCapitulo($em,$request,&$capitulo) {
		
		$editarCapitulo = $this->createForm(new CapituloType($this->generateUrl('_formCapitulo')),$capitulo);
		
		return $editarCapitulo;
	}
	
	/**
	 * @Route("/formCapitulo",name="_formCapitulo")
	 *@Template()
	 * 
	 */
	
	public function formCapituloAction(Request $request) {
		$em = $this->getDoctrine()->getManager();
		$capitulo = new Capitulo();
		
		$editarCapitulo = $this->generateFormCapitulo($em, $request, $capitulo);
		$editarCapitulo->handleRequest($request);
		

		if ($editarCapitulo->isValid()) {			
			try {
				//SI ES NUEVO ID
				if ($editarCapitulo['capi_id_original']->getData() == -1) {
					$capitulo->setCapiId($editarCapitulo['capi_id']->getData());
					$capitulo->setCapiDetalle($editarCapitulo['capi_detalle']->getData());

					$em->persist($capitulo);
					$em->flush();
					unset($capitulo);
				}
				
				//SI EL ID NO CAMBIA
				else if ($editarCapitulo['capi_id']->getData() == $editarCapitulo['capi_id_original']->getData()) {
					$capitulo = $em->getRepository("abmBundle:Capitulo")->find($editarCapitulo['capi_id_original']->getData());
					$capitulo->setCapiDetalle($editarCapitulo['capi_detalle']->getData());
					$em->persist($capitulo);
					$em->flush();
					unset($capitulo);
						
				//SI EL ID CAMBIA
				} else {
					//CREO EL NUEVO
					$capitulo->setCapiId($editarCapitulo['capi_id']->getData());
					$capitulo->setCapiDetalle($editarCapitulo['capi_detalle']->getData());
					$em->persist($capitulo);
					$em->flush();
					
					
					//ACTUALIZO VALORES
					$query = $em->getRepository("abmBundle:ArchivoEstadistico")->findBy(array('aresCapitulo' => $editarCapitulo['capi_id_original']->getData()));
					foreach($query as $q) {
						$q->setAresCapitulo($editarCapitulo['capi_id']->getData());
						$em->persist($q);
					}
					
					$em->flush();
					
					$query = $em->getRepository("abmBundle:Jurisdiccion")->findBy(array('juriCapitulo' =>$editarCapitulo['capi_id_original']->getData()));
					
					foreach ($query as $q) {
						$q->setJuriCapitulo($editarCapitulo['capi_id']->getData());
						$em->persist($q);
					
					}
					
					$em->flush();
					
					//BORRO EL VIEJO
					$capitulo = $em->getRepository("abmBundle:Capitulo")->find($editarCapitulo['capi_id_original']->getData());
					$em->remove($capitulo);
					
					$em->flush();
					unset($capitulo);
				}
				
				
				
			} catch (DBALException $e) {
				if( $e->getCode() == '0' )
				{
					if( strpos($e->getMessage(), 'ORA-00001') )
						return new JSONResponse(array('message' => 'Clave duplicada, por favor seleccione otro número'), 419);
		
// 					else return new JSONResponse(array('message' => 'Error: Por favor intente de nuevo'),419);
				}
			}
			return new JSONResponse(array(1 => 1));
			
		}
		
		return array(
				'editarCapitulo' => $editarCapitulo->createView()
		);
	}
	
	
	/**
	 * @Route("/formAnio",name="_formAnio")
	 * @Template()
	 */
	
	public function formAnioAction(Request $request) {
		$anio = new Anio();		
		$em = $this->getDoctrine()->getManager();
		
		$agregarAnio = $this->generateformAnio($em,$request,$anio);
		$agregarAnio->handleRequest($request);
		if ($agregarAnio->isValid()) {
				
		
			$anio->setAnioId($agregarAnio['anioId']->getData());
			$anio->setAnioHabilitado($agregarAnio['anioHabilitado']->getData());
			$em->persist($anio);
			$em->flush();
			unset($anio);
		
			if (in_array('dupanio',$agregarAnio['anioOpciones']->getData())) {
				$ultimoAnio = $em->createQuery('select MAX(ae.aresAnio) from abmBundle:ArchivoEstadistico ae')->getResult()[0][1];
				$nuevoAnio = $agregarAnio['anioId']->getData();
		
		
				$ultimoAnioIndicadores = $em->createQuery('select MAX(i.indiAnio) from abmBundle:Indicador i')->getResult()[0][1];
				$query = $em->getRepository("abmBundle:Indicador")->findBy(array('indiAnio' => $ultimoAnioIndicadores));
		
		
				foreach ($query as $q) {
					$indicador = new Indicador();
						
					$indicador->setIndiAnio($nuevoAnio);
					$indicador->setIndiCapitulo($q->getIndiCapitulo());
					$indicador->setIndiDescarga(str_replace("_" . substr($ultimoAnioIndicadores,2),"_" . substr($nuevoAnio,2),$q->getIndiDescarga()));
					$indicador->setIndiDescarga(str_replace($ultimoAnioIndicadores,$nuevoAnio,$indicador->getIndiDescarga()));
					$indicador->setIndiDescarga(str_replace($ultimoAnioIndicadores+1,$nuevoAnio+1,$indicador->getIndiDescarga()));
					$indicador->setIndiDetalle($q->getIndiDetalle());
					$indicador->setIndiLink(str_replace("_" . substr($ultimoAnioIndicadores,2),"_" . substr($nuevoAnio,2),$q->getIndiLink()));
					$indicador->setIndiLink(str_replace($ultimoAnioIndicadores,$nuevoAnio,$indicador->getIndiLink()));
					$indicador->setIndiLink(str_replace($ultimoAnioIndicadores+1,$nuevoAnio+1,$indicador->getIndiLink()));
						
					$em->persist($indicador);
				}
		
					
		
				$query = $em->getRepository("abmBundle:ArchivoEstadistico")->findBy(array('aresAnio' => $ultimoAnio));
		
		
				foreach($query as $q) {
		
		
					$archivo = new ArchivoEstadistico();
		
					$archivo->setAresAnio($nuevoAnio);
					$archivo->setAresCapitulo($q->getAresCapitulo());
					$archivo->setAresComentario($q->getAresComentario());
					$archivo->setAresDescarga(str_replace("_" . substr($ultimoAnio,2),"_" . substr($nuevoAnio,2),$q->getAresDescarga()));
					$archivo->setAresDescarga(str_replace($ultimoAnio,$nuevoAnio,$archivo->getAresDescarga()));
					$archivo->setAresDescarga(str_replace($ultimoAnio+1,$nuevoAnio+1,$archivo->getAresDescarga()));
					$archivo->setAresDescripcion($q->getAresDescripcion());
					$archivo->setAresDetalle($q->getAresDetalle());
					$archivo->setAresLink(str_replace("_" . substr($ultimoAnio,2),"_" . substr($nuevoAnio,2),$q->getAresLink()));
					$archivo->setAresLink(str_replace($ultimoAnio,$nuevoAnio,$archivo->getAresLink()));
					$archivo->setAresLink(str_replace($ultimoAnio+1,$nuevoAnio+1,$archivo->getAresLink()));
					$archivo->setAresSubtitulo($q->getAresSubtitulo());
					$archivo->setAresTitulo($q->getAresTitulo());
		
		
					$em->persist($archivo);
		
		
				}
		
				$em->flush();
		
		
			}
				
			return new JSONResponse(array(1 => 1));
		}
		
		return array(
				'agregarAnio' => $agregarAnio->createView()
		);
	}
	
	/**
	 * @Route("/admin",name="_admin")
	 * 
	 */
	public function adminAction(Request $request)
	{
		$anio = new Anio();
		$capitulo = new Capitulo();
		
		$em = $this->getDoctrine()->getManager();
		
		$agregarAnio = $this->generateFormAnio($em,$request,$anio);
		$editarCapitulo = $this->generateFormCapitulo($em,$request,$capitulo);
		$agregarCapitulo = $this->generateFormCapitulo($em,$request,$capitulo);
		
// 			$form = $this->formAnioAction($request);
			return $this->render("abmBundle:admin:admin.html.twig", array(
					'agregarAnio' => $agregarAnio->createView(),
					'editarCapitulo' => $editarCapitulo->createView(),
					'agregarCapitulo' => $agregarCapitulo->createView()
			));
	}

	
	
	/**
	 * @Route("/getTabla", name="_getTabla")
	 * 
	 */
	public function getTablaAction(Request $request) {
		$serializador = $this->get("Serializador");
		$em = $this->getDoctrine()->getManager();
		$query = $em->getRepository("abmBundle:".$request->request->get("tabla",'Anio'))->findAll();
		return new JSONResponse($serializador->toJson($query));
	}
	
	/**
	 * @Route("/habilitacionAnio",name="_habilitacionAnio")
	 * 
	 */
	
	public function habilitacionAnioAction(Request $request) {
		$em = $this->getDoctrine()->getManager();
		$fila = $em->getRepository("abmBundle:Anio")->find($request->request->get("anioId",2012));
		($fila->getAnioHabilitado() == 1) ? $fila->setAnioHabilitado(0) : $fila->setAnioHabilitado(1);
		$em->flush();		
		return new JSONResponse(array("habilitado" => $fila->getAnioHabilitado()));
	}
	
	/**
	 * @Route("/eliminarCapitulo", name="_eliminarCapitulo")
	 * 
	 * 
	 */
	public function eliminarCapituloAction(Request $request) {
		$this->removeBy("abmBundle:Jurisdiccion", array('juriCapitulo' => $request->request->get('capitulo')));
		$this->removeBy("abmBundle:ArchivoEstadistico", array('aresCapitulo' => $request->request->get('capitulo')));
		
		$em = $this->getDoctrine()->getManager();
		$q = $em->getRepository("abmBundle:Capitulo")->find($request->request->get('capitulo'));
		$em->remove($q);
		$em->flush();
		return new JSONResponse(array('ok' => 'ok'));
	}
	
	
	
	/**
	 * 
	 * @Route("/eliminarAnio",name="_eliminarAnio")
	 */
	
	public function eliminarAnioAction(Request $request) {
		//fallos archivos indicadores
		
		//ARCHIVOS
		
		$this->removeBy("abmBundle:ArchivoEstadistico", array('aresAnio' => $request->request->get('anioId',2030)));
		$this->removeBy("abmBundle:Fallo",array('fallAnio' => $request->request->get('anioId',2030)));
		$this->removeBy("abmBundle:Indicador", array('indiAnio' => $request->request->get('anioId',2030)));
		
		$em = $this->getDoctrine()->getManager();
		$q = $em->getRepository("abmBundle:Anio")->find($request->request->get('anioId',2030));
		$em->remove($q);
		$em->flush();
		
		return new JSONResponse(array('ok' => 'ok'));

	}
	
	
	
	//USAR array() para null
	public function removeBy($repo,$condition) {
		$em = $this->getDoctrine()->getManager();
		$query = $em->getRepository($repo)->findBy($condition);
		foreach($query as $q) {
			$em->remove($q);
		}
		$em->flush();
	}

	
	
	/**
	 * @Route("/getTablaCapitulo",name="_getTablaCapitulo")
	 * 
	 * 
	 */
	public function getTablaCapitulo(Request $request) {
		$serializador = $this->get("Serializador");
		$em = $this->getDoctrine()->getManager();
		$query = $em->getRepository("abmBundle:Capitulo")->findAll();
		return new JSONResponse($serializador->toJson($query));
		
	}

	
}